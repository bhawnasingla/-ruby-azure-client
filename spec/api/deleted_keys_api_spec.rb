=begin
#KeyVaultClient

#The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DeletedKeysApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DeletedKeysApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DeletedKeysApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DeletedKeysApi' do
    it 'should create an instance of DeletedKeysApi' do
      expect(@instance).to be_instance_of(SwaggerClient::DeletedKeysApi)
    end
  end

  # unit tests for get_deleted_key
  # Gets the public part of a deleted key.
  # The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
  # @param key_name The name of the key.
  # @param api_version Client API version.
  # @param [Hash] opts the optional parameters
  # @return [DeletedKeyBundle]
  describe 'get_deleted_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_deleted_keys
  # Lists the deleted keys in the specified vault.
  # Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
  # @param api_version Client API version.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
  # @return [DeletedKeyListResult]
  describe 'get_deleted_keys test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for purge_deleted_key
  # Permanently deletes the specified key.
  # The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
  # @param key_name The name of the key
  # @param api_version Client API version.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'purge_deleted_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for recover_deleted_key
  # Recovers the deleted key to its latest version.
  # The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
  # @param key_name The name of the deleted key.
  # @param api_version Client API version.
  # @param [Hash] opts the optional parameters
  # @return [KeyBundle]
  describe 'recover_deleted_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
