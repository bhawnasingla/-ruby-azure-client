=begin
#KeyVaultClient

#The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module SwaggerClient
  class CertificatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Backs up the specified certificate.
    # Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [BackupCertificateResult]
    def backup_certificate(certificate_name, api_version, opts = {})
      data, _status_code, _headers = backup_certificate_with_http_info(certificate_name, api_version, opts)
      data
    end

    # Backs up the specified certificate.
    # Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BackupCertificateResult, Fixnum, Hash)>] BackupCertificateResult data, response status code and response headers
    def backup_certificate_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.backup_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.backup_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.backup_certificate"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/backup'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BackupCertificateResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#backup_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new certificate.
    # If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
    # @param certificate_name The name of the certificate.
    # @param parameters The parameters to create a certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateOperation]
    def create_certificate(certificate_name, parameters, api_version, opts = {})
      data, _status_code, _headers = create_certificate_with_http_info(certificate_name, parameters, api_version, opts)
      data
    end

    # Creates a new certificate.
    # If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
    # @param certificate_name The name of the certificate.
    # @param parameters The parameters to create a certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateOperation, Fixnum, Hash)>] CertificateOperation data, response status code and response headers
    def create_certificate_with_http_info(certificate_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.create_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.create_certificate"
      end
      if @api_client.config.client_side_validation && certificate_name !~ Regexp.new(/^[0-9a-zA-Z-]+$/)
        fail ArgumentError, "invalid value for 'certificate_name' when calling CertificatesApi.create_certificate, must conform to the pattern /^[0-9a-zA-Z-]+$/."
      end

      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling CertificatesApi.create_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.create_certificate"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/create'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateOperation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#create_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a certificate from a specified key vault.
    # Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [DeletedCertificateBundle]
    def delete_certificate(certificate_name, api_version, opts = {})
      data, _status_code, _headers = delete_certificate_with_http_info(certificate_name, api_version, opts)
      data
    end

    # Deletes a certificate from a specified key vault.
    # Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedCertificateBundle, Fixnum, Hash)>] DeletedCertificateBundle data, response status code and response headers
    def delete_certificate_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.delete_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.delete_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.delete_certificate"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedCertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#delete_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes the certificate contacts for a specified key vault.
    # Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Contacts]
    def delete_certificate_contacts(api_version, opts = {})
      data, _status_code, _headers = delete_certificate_contacts_with_http_info(api_version, opts)
      data
    end

    # Deletes the certificate contacts for a specified key vault.
    # Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contacts, Fixnum, Hash)>] Contacts data, response status code and response headers
    def delete_certificate_contacts_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.delete_certificate_contacts ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.delete_certificate_contacts"
      end
      # resource path
      local_var_path = '/certificates/contacts'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contacts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#delete_certificate_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes the specified certificate issuer.
    # The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
    # @param issuer_name The name of the issuer.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [IssuerBundle]
    def delete_certificate_issuer(issuer_name, api_version, opts = {})
      data, _status_code, _headers = delete_certificate_issuer_with_http_info(issuer_name, api_version, opts)
      data
    end

    # Deletes the specified certificate issuer.
    # The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
    # @param issuer_name The name of the issuer.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssuerBundle, Fixnum, Hash)>] IssuerBundle data, response status code and response headers
    def delete_certificate_issuer_with_http_info(issuer_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.delete_certificate_issuer ...'
      end
      # verify the required parameter 'issuer_name' is set
      if @api_client.config.client_side_validation && issuer_name.nil?
        fail ArgumentError, "Missing the required parameter 'issuer_name' when calling CertificatesApi.delete_certificate_issuer"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.delete_certificate_issuer"
      end
      # resource path
      local_var_path = '/certificates/issuers/{issuer-name}'.sub('{' + 'issuer-name' + '}', issuer_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IssuerBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#delete_certificate_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes the creation operation for a specific certificate.
    # Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateOperation]
    def delete_certificate_operation(certificate_name, api_version, opts = {})
      data, _status_code, _headers = delete_certificate_operation_with_http_info(certificate_name, api_version, opts)
      data
    end

    # Deletes the creation operation for a specific certificate.
    # Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateOperation, Fixnum, Hash)>] CertificateOperation data, response status code and response headers
    def delete_certificate_operation_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.delete_certificate_operation ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.delete_certificate_operation"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.delete_certificate_operation"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/pending'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateOperation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#delete_certificate_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets information about a certificate.
    # Gets information about a specific certificate. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate in the given vault.
    # @param certificate_version The version of the certificate. This URI fragment is optional. If not specified, the latest version of the certificate is returned.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateBundle]
    def get_certificate(certificate_name, certificate_version, api_version, opts = {})
      data, _status_code, _headers = get_certificate_with_http_info(certificate_name, certificate_version, api_version, opts)
      data
    end

    # Gets information about a certificate.
    # Gets information about a specific certificate. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate in the given vault.
    # @param certificate_version The version of the certificate. This URI fragment is optional. If not specified, the latest version of the certificate is returned.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateBundle, Fixnum, Hash)>] CertificateBundle data, response status code and response headers
    def get_certificate_with_http_info(certificate_name, certificate_version, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.get_certificate"
      end
      # verify the required parameter 'certificate_version' is set
      if @api_client.config.client_side_validation && certificate_version.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_version' when calling CertificatesApi.get_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificate"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/{certificate-version}'.sub('{' + 'certificate-name' + '}', certificate_name.to_s).sub('{' + 'certificate-version' + '}', certificate_version.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists the certificate contacts for a specified key vault.
    # The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Contacts]
    def get_certificate_contacts(api_version, opts = {})
      data, _status_code, _headers = get_certificate_contacts_with_http_info(api_version, opts)
      data
    end

    # Lists the certificate contacts for a specified key vault.
    # The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contacts, Fixnum, Hash)>] Contacts data, response status code and response headers
    def get_certificate_contacts_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificate_contacts ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificate_contacts"
      end
      # resource path
      local_var_path = '/certificates/contacts'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contacts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificate_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists the specified certificate issuer.
    # The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
    # @param issuer_name The name of the issuer.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [IssuerBundle]
    def get_certificate_issuer(issuer_name, api_version, opts = {})
      data, _status_code, _headers = get_certificate_issuer_with_http_info(issuer_name, api_version, opts)
      data
    end

    # Lists the specified certificate issuer.
    # The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
    # @param issuer_name The name of the issuer.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssuerBundle, Fixnum, Hash)>] IssuerBundle data, response status code and response headers
    def get_certificate_issuer_with_http_info(issuer_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificate_issuer ...'
      end
      # verify the required parameter 'issuer_name' is set
      if @api_client.config.client_side_validation && issuer_name.nil?
        fail ArgumentError, "Missing the required parameter 'issuer_name' when calling CertificatesApi.get_certificate_issuer"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificate_issuer"
      end
      # resource path
      local_var_path = '/certificates/issuers/{issuer-name}'.sub('{' + 'issuer-name' + '}', issuer_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IssuerBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificate_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List certificate issuers for a specified key vault.
    # The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [CertificateIssuerListResult]
    def get_certificate_issuers(api_version, opts = {})
      data, _status_code, _headers = get_certificate_issuers_with_http_info(api_version, opts)
      data
    end

    # List certificate issuers for a specified key vault.
    # The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [Array<(CertificateIssuerListResult, Fixnum, Hash)>] CertificateIssuerListResult data, response status code and response headers
    def get_certificate_issuers_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificate_issuers ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificate_issuers"
      end
      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] > 25
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling CertificatesApi.get_certificate_issuers, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] < 1
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling CertificatesApi.get_certificate_issuers, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/certificates/issuers'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version
      query_params[:'maxresults'] = opts[:'maxresults'] if !opts[:'maxresults'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateIssuerListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificate_issuers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the creation operation of a certificate.
    # Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateOperation]
    def get_certificate_operation(certificate_name, api_version, opts = {})
      data, _status_code, _headers = get_certificate_operation_with_http_info(certificate_name, api_version, opts)
      data
    end

    # Gets the creation operation of a certificate.
    # Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateOperation, Fixnum, Hash)>] CertificateOperation data, response status code and response headers
    def get_certificate_operation_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificate_operation ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.get_certificate_operation"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificate_operation"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/pending'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateOperation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificate_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists the policy for a certificate.
    # The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate in a given key vault.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificatePolicy]
    def get_certificate_policy(certificate_name, api_version, opts = {})
      data, _status_code, _headers = get_certificate_policy_with_http_info(certificate_name, api_version, opts)
      data
    end

    # Lists the policy for a certificate.
    # The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate in a given key vault.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificatePolicy, Fixnum, Hash)>] CertificatePolicy data, response status code and response headers
    def get_certificate_policy_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificate_policy ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.get_certificate_policy"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificate_policy"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/policy'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificatePolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificate_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the versions of a certificate.
    # The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [CertificateListResult]
    def get_certificate_versions(certificate_name, api_version, opts = {})
      data, _status_code, _headers = get_certificate_versions_with_http_info(certificate_name, api_version, opts)
      data
    end

    # List the versions of a certificate.
    # The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
    # @param certificate_name The name of the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [Array<(CertificateListResult, Fixnum, Hash)>] CertificateListResult data, response status code and response headers
    def get_certificate_versions_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificate_versions ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.get_certificate_versions"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificate_versions"
      end
      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] > 25
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling CertificatesApi.get_certificate_versions, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] < 1
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling CertificatesApi.get_certificate_versions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/certificates/{certificate-name}/versions'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version
      query_params[:'maxresults'] = opts[:'maxresults'] if !opts[:'maxresults'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificate_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List certificates in a specified key vault
    # The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @option opts [BOOLEAN] :include_pending Specifies whether to include certificates which are not completely provisioned.
    # @return [CertificateListResult]
    def get_certificates(api_version, opts = {})
      data, _status_code, _headers = get_certificates_with_http_info(api_version, opts)
      data
    end

    # List certificates in a specified key vault
    # The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @option opts [BOOLEAN] :include_pending Specifies whether to include certificates which are not completely provisioned.
    # @return [Array<(CertificateListResult, Fixnum, Hash)>] CertificateListResult data, response status code and response headers
    def get_certificates_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.get_certificates ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.get_certificates"
      end
      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] > 25
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling CertificatesApi.get_certificates, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] < 1
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling CertificatesApi.get_certificates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/certificates'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version
      query_params[:'maxresults'] = opts[:'maxresults'] if !opts[:'maxresults'].nil?
      query_params[:'includePending'] = opts[:'include_pending'] if !opts[:'include_pending'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#get_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Imports a certificate into a specified key vault.
    # Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
    # @param certificate_name The name of the certificate.
    # @param parameters The parameters to import the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateBundle]
    def import_certificate(certificate_name, parameters, api_version, opts = {})
      data, _status_code, _headers = import_certificate_with_http_info(certificate_name, parameters, api_version, opts)
      data
    end

    # Imports a certificate into a specified key vault.
    # Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
    # @param certificate_name The name of the certificate.
    # @param parameters The parameters to import the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateBundle, Fixnum, Hash)>] CertificateBundle data, response status code and response headers
    def import_certificate_with_http_info(certificate_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.import_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.import_certificate"
      end
      if @api_client.config.client_side_validation && certificate_name !~ Regexp.new(/^[0-9a-zA-Z-]+$/)
        fail ArgumentError, "invalid value for 'certificate_name' when calling CertificatesApi.import_certificate, must conform to the pattern /^[0-9a-zA-Z-]+$/."
      end

      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling CertificatesApi.import_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.import_certificate"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/import'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#import_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Merges a certificate or a certificate chain with a key pair existing on the server.
    # The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
    # @param certificate_name The name of the certificate.
    # @param parameters The parameters to merge certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateBundle]
    def merge_certificate(certificate_name, parameters, api_version, opts = {})
      data, _status_code, _headers = merge_certificate_with_http_info(certificate_name, parameters, api_version, opts)
      data
    end

    # Merges a certificate or a certificate chain with a key pair existing on the server.
    # The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
    # @param certificate_name The name of the certificate.
    # @param parameters The parameters to merge certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateBundle, Fixnum, Hash)>] CertificateBundle data, response status code and response headers
    def merge_certificate_with_http_info(certificate_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.merge_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.merge_certificate"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling CertificatesApi.merge_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.merge_certificate"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/pending/merge'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#merge_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restores a backed up certificate to a vault.
    # Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
    # @param parameters The parameters to restore the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateBundle]
    def restore_certificate(parameters, api_version, opts = {})
      data, _status_code, _headers = restore_certificate_with_http_info(parameters, api_version, opts)
      data
    end

    # Restores a backed up certificate to a vault.
    # Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
    # @param parameters The parameters to restore the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateBundle, Fixnum, Hash)>] CertificateBundle data, response status code and response headers
    def restore_certificate_with_http_info(parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.restore_certificate ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling CertificatesApi.restore_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.restore_certificate"
      end
      # resource path
      local_var_path = '/certificates/restore'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#restore_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets the certificate contacts for the specified key vault.
    # Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
    # @param contacts The contacts for the key vault certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Contacts]
    def set_certificate_contacts(contacts, api_version, opts = {})
      data, _status_code, _headers = set_certificate_contacts_with_http_info(contacts, api_version, opts)
      data
    end

    # Sets the certificate contacts for the specified key vault.
    # Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
    # @param contacts The contacts for the key vault certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contacts, Fixnum, Hash)>] Contacts data, response status code and response headers
    def set_certificate_contacts_with_http_info(contacts, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.set_certificate_contacts ...'
      end
      # verify the required parameter 'contacts' is set
      if @api_client.config.client_side_validation && contacts.nil?
        fail ArgumentError, "Missing the required parameter 'contacts' when calling CertificatesApi.set_certificate_contacts"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.set_certificate_contacts"
      end
      # resource path
      local_var_path = '/certificates/contacts'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contacts)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contacts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#set_certificate_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets the specified certificate issuer.
    # The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
    # @param issuer_name The name of the issuer.
    # @param parameter Certificate issuer set parameter.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [IssuerBundle]
    def set_certificate_issuer(issuer_name, parameter, api_version, opts = {})
      data, _status_code, _headers = set_certificate_issuer_with_http_info(issuer_name, parameter, api_version, opts)
      data
    end

    # Sets the specified certificate issuer.
    # The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
    # @param issuer_name The name of the issuer.
    # @param parameter Certificate issuer set parameter.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssuerBundle, Fixnum, Hash)>] IssuerBundle data, response status code and response headers
    def set_certificate_issuer_with_http_info(issuer_name, parameter, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.set_certificate_issuer ...'
      end
      # verify the required parameter 'issuer_name' is set
      if @api_client.config.client_side_validation && issuer_name.nil?
        fail ArgumentError, "Missing the required parameter 'issuer_name' when calling CertificatesApi.set_certificate_issuer"
      end
      # verify the required parameter 'parameter' is set
      if @api_client.config.client_side_validation && parameter.nil?
        fail ArgumentError, "Missing the required parameter 'parameter' when calling CertificatesApi.set_certificate_issuer"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.set_certificate_issuer"
      end
      # resource path
      local_var_path = '/certificates/issuers/{issuer-name}'.sub('{' + 'issuer-name' + '}', issuer_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameter)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IssuerBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#set_certificate_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the specified attributes associated with the given certificate.
    # The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate in the given key vault.
    # @param certificate_version The version of the certificate.
    # @param parameters The parameters for certificate update.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateBundle]
    def update_certificate(certificate_name, certificate_version, parameters, api_version, opts = {})
      data, _status_code, _headers = update_certificate_with_http_info(certificate_name, certificate_version, parameters, api_version, opts)
      data
    end

    # Updates the specified attributes associated with the given certificate.
    # The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate in the given key vault.
    # @param certificate_version The version of the certificate.
    # @param parameters The parameters for certificate update.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateBundle, Fixnum, Hash)>] CertificateBundle data, response status code and response headers
    def update_certificate_with_http_info(certificate_name, certificate_version, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.update_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.update_certificate"
      end
      # verify the required parameter 'certificate_version' is set
      if @api_client.config.client_side_validation && certificate_version.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_version' when calling CertificatesApi.update_certificate"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling CertificatesApi.update_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.update_certificate"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/{certificate-version}'.sub('{' + 'certificate-name' + '}', certificate_name.to_s).sub('{' + 'certificate-version' + '}', certificate_version.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#update_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the specified certificate issuer.
    # The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
    # @param issuer_name The name of the issuer.
    # @param parameter Certificate issuer update parameter.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [IssuerBundle]
    def update_certificate_issuer(issuer_name, parameter, api_version, opts = {})
      data, _status_code, _headers = update_certificate_issuer_with_http_info(issuer_name, parameter, api_version, opts)
      data
    end

    # Updates the specified certificate issuer.
    # The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
    # @param issuer_name The name of the issuer.
    # @param parameter Certificate issuer update parameter.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssuerBundle, Fixnum, Hash)>] IssuerBundle data, response status code and response headers
    def update_certificate_issuer_with_http_info(issuer_name, parameter, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.update_certificate_issuer ...'
      end
      # verify the required parameter 'issuer_name' is set
      if @api_client.config.client_side_validation && issuer_name.nil?
        fail ArgumentError, "Missing the required parameter 'issuer_name' when calling CertificatesApi.update_certificate_issuer"
      end
      # verify the required parameter 'parameter' is set
      if @api_client.config.client_side_validation && parameter.nil?
        fail ArgumentError, "Missing the required parameter 'parameter' when calling CertificatesApi.update_certificate_issuer"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.update_certificate_issuer"
      end
      # resource path
      local_var_path = '/certificates/issuers/{issuer-name}'.sub('{' + 'issuer-name' + '}', issuer_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameter)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IssuerBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#update_certificate_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a certificate operation.
    # Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate.
    # @param certificate_operation The certificate operation response.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateOperation]
    def update_certificate_operation(certificate_name, certificate_operation, api_version, opts = {})
      data, _status_code, _headers = update_certificate_operation_with_http_info(certificate_name, certificate_operation, api_version, opts)
      data
    end

    # Updates a certificate operation.
    # Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate.
    # @param certificate_operation The certificate operation response.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateOperation, Fixnum, Hash)>] CertificateOperation data, response status code and response headers
    def update_certificate_operation_with_http_info(certificate_name, certificate_operation, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.update_certificate_operation ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.update_certificate_operation"
      end
      # verify the required parameter 'certificate_operation' is set
      if @api_client.config.client_side_validation && certificate_operation.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_operation' when calling CertificatesApi.update_certificate_operation"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.update_certificate_operation"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/pending'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(certificate_operation)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateOperation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#update_certificate_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the policy for a certificate.
    # Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate in the given vault.
    # @param certificate_policy The policy for the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificatePolicy]
    def update_certificate_policy(certificate_name, certificate_policy, api_version, opts = {})
      data, _status_code, _headers = update_certificate_policy_with_http_info(certificate_name, certificate_policy, api_version, opts)
      data
    end

    # Updates the policy for a certificate.
    # Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
    # @param certificate_name The name of the certificate in the given vault.
    # @param certificate_policy The policy for the certificate.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificatePolicy, Fixnum, Hash)>] CertificatePolicy data, response status code and response headers
    def update_certificate_policy_with_http_info(certificate_name, certificate_policy, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.update_certificate_policy ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling CertificatesApi.update_certificate_policy"
      end
      # verify the required parameter 'certificate_policy' is set
      if @api_client.config.client_side_validation && certificate_policy.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_policy' when calling CertificatesApi.update_certificate_policy"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling CertificatesApi.update_certificate_policy"
      end
      # resource path
      local_var_path = '/certificates/{certificate-name}/policy'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(certificate_policy)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificatePolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#update_certificate_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
