=begin
#KeyVaultClient

#The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module SwaggerClient
  class StorageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Backs up the specified storage account.
    # Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [BackupStorageResult]
    def backup_storage_account(storage_account_name, api_version, opts = {})
      data, _status_code, _headers = backup_storage_account_with_http_info(storage_account_name, api_version, opts)
      data
    end

    # Backs up the specified storage account.
    # Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BackupStorageResult, Fixnum, Hash)>] BackupStorageResult data, response status code and response headers
    def backup_storage_account_with_http_info(storage_account_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.backup_storage_account ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.backup_storage_account"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.backup_storage_account"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}/backup'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BackupStorageResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#backup_storage_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [DeletedSasDefinitionBundle]
    def delete_sas_definition(storage_account_name, sas_definition_name, api_version, opts = {})
      data, _status_code, _headers = delete_sas_definition_with_http_info(storage_account_name, sas_definition_name, api_version, opts)
      data
    end

    # Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedSasDefinitionBundle, Fixnum, Hash)>] DeletedSasDefinitionBundle data, response status code and response headers
    def delete_sas_definition_with_http_info(storage_account_name, sas_definition_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.delete_sas_definition ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.delete_sas_definition"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.delete_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'sas_definition_name' is set
      if @api_client.config.client_side_validation && sas_definition_name.nil?
        fail ArgumentError, "Missing the required parameter 'sas_definition_name' when calling StorageApi.delete_sas_definition"
      end
      if @api_client.config.client_side_validation && sas_definition_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'sas_definition_name' when calling StorageApi.delete_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.delete_sas_definition"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}/sas/{sas-definition-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s).sub('{' + 'sas-definition-name' + '}', sas_definition_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedSasDefinitionBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#delete_sas_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a storage account. This operation requires the storage/delete permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [DeletedStorageBundle]
    def delete_storage_account(storage_account_name, api_version, opts = {})
      data, _status_code, _headers = delete_storage_account_with_http_info(storage_account_name, api_version, opts)
      data
    end

    # Deletes a storage account. This operation requires the storage/delete permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedStorageBundle, Fixnum, Hash)>] DeletedStorageBundle data, response status code and response headers
    def delete_storage_account_with_http_info(storage_account_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.delete_storage_account ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.delete_storage_account"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.delete_storage_account, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.delete_storage_account"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedStorageBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#delete_storage_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [SasDefinitionBundle]
    def get_sas_definition(storage_account_name, sas_definition_name, api_version, opts = {})
      data, _status_code, _headers = get_sas_definition_with_http_info(storage_account_name, sas_definition_name, api_version, opts)
      data
    end

    # Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SasDefinitionBundle, Fixnum, Hash)>] SasDefinitionBundle data, response status code and response headers
    def get_sas_definition_with_http_info(storage_account_name, sas_definition_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.get_sas_definition ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.get_sas_definition"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.get_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'sas_definition_name' is set
      if @api_client.config.client_side_validation && sas_definition_name.nil?
        fail ArgumentError, "Missing the required parameter 'sas_definition_name' when calling StorageApi.get_sas_definition"
      end
      if @api_client.config.client_side_validation && sas_definition_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'sas_definition_name' when calling StorageApi.get_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.get_sas_definition"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}/sas/{sas-definition-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s).sub('{' + 'sas-definition-name' + '}', sas_definition_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SasDefinitionBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#get_sas_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [SasDefinitionListResult]
    def get_sas_definitions(storage_account_name, api_version, opts = {})
      data, _status_code, _headers = get_sas_definitions_with_http_info(storage_account_name, api_version, opts)
      data
    end

    # List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [Array<(SasDefinitionListResult, Fixnum, Hash)>] SasDefinitionListResult data, response status code and response headers
    def get_sas_definitions_with_http_info(storage_account_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.get_sas_definitions ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.get_sas_definitions"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.get_sas_definitions, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.get_sas_definitions"
      end
      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] > 25
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling StorageApi.get_sas_definitions, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] < 1
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling StorageApi.get_sas_definitions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/storage/{storage-account-name}/sas'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version
      query_params[:'maxresults'] = opts[:'maxresults'] if !opts[:'maxresults'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SasDefinitionListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#get_sas_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets information about a specified storage account. This operation requires the storage/get permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [StorageBundle]
    def get_storage_account(storage_account_name, api_version, opts = {})
      data, _status_code, _headers = get_storage_account_with_http_info(storage_account_name, api_version, opts)
      data
    end

    # Gets information about a specified storage account. This operation requires the storage/get permission.
    # @param storage_account_name The name of the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageBundle, Fixnum, Hash)>] StorageBundle data, response status code and response headers
    def get_storage_account_with_http_info(storage_account_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.get_storage_account ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.get_storage_account"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.get_storage_account, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.get_storage_account"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#get_storage_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [StorageListResult]
    def get_storage_accounts(api_version, opts = {})
      data, _status_code, _headers = get_storage_accounts_with_http_info(api_version, opts)
      data
    end

    # List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [Array<(StorageListResult, Fixnum, Hash)>] StorageListResult data, response status code and response headers
    def get_storage_accounts_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.get_storage_accounts ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.get_storage_accounts"
      end
      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] > 25
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling StorageApi.get_storage_accounts, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] < 1
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling StorageApi.get_storage_accounts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/storage'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version
      query_params[:'maxresults'] = opts[:'maxresults'] if !opts[:'maxresults'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#get_storage_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
    # @param storage_account_name The name of the storage account.
    # @param parameters The parameters to regenerate storage account key.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [StorageBundle]
    def regenerate_storage_account_key(storage_account_name, parameters, api_version, opts = {})
      data, _status_code, _headers = regenerate_storage_account_key_with_http_info(storage_account_name, parameters, api_version, opts)
      data
    end

    # Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
    # @param storage_account_name The name of the storage account.
    # @param parameters The parameters to regenerate storage account key.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageBundle, Fixnum, Hash)>] StorageBundle data, response status code and response headers
    def regenerate_storage_account_key_with_http_info(storage_account_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.regenerate_storage_account_key ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.regenerate_storage_account_key"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.regenerate_storage_account_key, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling StorageApi.regenerate_storage_account_key"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.regenerate_storage_account_key"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}/regeneratekey'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#regenerate_storage_account_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restores a backed up storage account to a vault.
    # Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
    # @param parameters The parameters to restore the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [StorageBundle]
    def restore_storage_account(parameters, api_version, opts = {})
      data, _status_code, _headers = restore_storage_account_with_http_info(parameters, api_version, opts)
      data
    end

    # Restores a backed up storage account to a vault.
    # Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
    # @param parameters The parameters to restore the storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageBundle, Fixnum, Hash)>] StorageBundle data, response status code and response headers
    def restore_storage_account_with_http_info(parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.restore_storage_account ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling StorageApi.restore_storage_account"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.restore_storage_account"
      end
      # resource path
      local_var_path = '/storage/restore'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#restore_storage_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param parameters The parameters to create a SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [SasDefinitionBundle]
    def set_sas_definition(storage_account_name, sas_definition_name, parameters, api_version, opts = {})
      data, _status_code, _headers = set_sas_definition_with_http_info(storage_account_name, sas_definition_name, parameters, api_version, opts)
      data
    end

    # Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param parameters The parameters to create a SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SasDefinitionBundle, Fixnum, Hash)>] SasDefinitionBundle data, response status code and response headers
    def set_sas_definition_with_http_info(storage_account_name, sas_definition_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.set_sas_definition ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.set_sas_definition"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.set_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'sas_definition_name' is set
      if @api_client.config.client_side_validation && sas_definition_name.nil?
        fail ArgumentError, "Missing the required parameter 'sas_definition_name' when calling StorageApi.set_sas_definition"
      end
      if @api_client.config.client_side_validation && sas_definition_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'sas_definition_name' when calling StorageApi.set_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling StorageApi.set_sas_definition"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.set_sas_definition"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}/sas/{sas-definition-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s).sub('{' + 'sas-definition-name' + '}', sas_definition_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SasDefinitionBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#set_sas_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates or updates a new storage account. This operation requires the storage/set permission.
    # @param storage_account_name The name of the storage account.
    # @param parameters The parameters to create a storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [StorageBundle]
    def set_storage_account(storage_account_name, parameters, api_version, opts = {})
      data, _status_code, _headers = set_storage_account_with_http_info(storage_account_name, parameters, api_version, opts)
      data
    end

    # Creates or updates a new storage account. This operation requires the storage/set permission.
    # @param storage_account_name The name of the storage account.
    # @param parameters The parameters to create a storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageBundle, Fixnum, Hash)>] StorageBundle data, response status code and response headers
    def set_storage_account_with_http_info(storage_account_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.set_storage_account ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.set_storage_account"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.set_storage_account, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling StorageApi.set_storage_account"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.set_storage_account"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#set_storage_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param parameters The parameters to update a SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [SasDefinitionBundle]
    def update_sas_definition(storage_account_name, sas_definition_name, parameters, api_version, opts = {})
      data, _status_code, _headers = update_sas_definition_with_http_info(storage_account_name, sas_definition_name, parameters, api_version, opts)
      data
    end

    # Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
    # @param storage_account_name The name of the storage account.
    # @param sas_definition_name The name of the SAS definition.
    # @param parameters The parameters to update a SAS definition.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SasDefinitionBundle, Fixnum, Hash)>] SasDefinitionBundle data, response status code and response headers
    def update_sas_definition_with_http_info(storage_account_name, sas_definition_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.update_sas_definition ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.update_sas_definition"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.update_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'sas_definition_name' is set
      if @api_client.config.client_side_validation && sas_definition_name.nil?
        fail ArgumentError, "Missing the required parameter 'sas_definition_name' when calling StorageApi.update_sas_definition"
      end
      if @api_client.config.client_side_validation && sas_definition_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'sas_definition_name' when calling StorageApi.update_sas_definition, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling StorageApi.update_sas_definition"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.update_sas_definition"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}/sas/{sas-definition-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s).sub('{' + 'sas-definition-name' + '}', sas_definition_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SasDefinitionBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#update_sas_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
    # @param storage_account_name The name of the storage account.
    # @param parameters The parameters to update a storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [StorageBundle]
    def update_storage_account(storage_account_name, parameters, api_version, opts = {})
      data, _status_code, _headers = update_storage_account_with_http_info(storage_account_name, parameters, api_version, opts)
      data
    end

    # Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
    # @param storage_account_name The name of the storage account.
    # @param parameters The parameters to update a storage account.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageBundle, Fixnum, Hash)>] StorageBundle data, response status code and response headers
    def update_storage_account_with_http_info(storage_account_name, parameters, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.update_storage_account ...'
      end
      # verify the required parameter 'storage_account_name' is set
      if @api_client.config.client_side_validation && storage_account_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_account_name' when calling StorageApi.update_storage_account"
      end
      if @api_client.config.client_side_validation && storage_account_name !~ Regexp.new(/^[0-9a-zA-Z]+$/)
        fail ArgumentError, "invalid value for 'storage_account_name' when calling StorageApi.update_storage_account, must conform to the pattern /^[0-9a-zA-Z]+$/."
      end

      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling StorageApi.update_storage_account"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling StorageApi.update_storage_account"
      end
      # resource path
      local_var_path = '/storage/{storage-account-name}'.sub('{' + 'storage-account-name' + '}', storage_account_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#update_storage_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
