=begin
#KeyVaultClient

#The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module SwaggerClient
  class DeletedSecretsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets the specified deleted secret.
    # The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
    # @param secret_name The name of the secret.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [DeletedSecretBundle]
    def get_deleted_secret(secret_name, api_version, opts = {})
      data, _status_code, _headers = get_deleted_secret_with_http_info(secret_name, api_version, opts)
      data
    end

    # Gets the specified deleted secret.
    # The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
    # @param secret_name The name of the secret.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedSecretBundle, Fixnum, Hash)>] DeletedSecretBundle data, response status code and response headers
    def get_deleted_secret_with_http_info(secret_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedSecretsApi.get_deleted_secret ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DeletedSecretsApi.get_deleted_secret"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedSecretsApi.get_deleted_secret"
      end
      # resource path
      local_var_path = '/deletedsecrets/{secret-name}'.sub('{' + 'secret-name' + '}', secret_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedSecretBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedSecretsApi#get_deleted_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists deleted secrets for the specified vault.
    # The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [DeletedSecretListResult]
    def get_deleted_secrets(api_version, opts = {})
      data, _status_code, _headers = get_deleted_secrets_with_http_info(api_version, opts)
      data
    end

    # Lists deleted secrets for the specified vault.
    # The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @return [Array<(DeletedSecretListResult, Fixnum, Hash)>] DeletedSecretListResult data, response status code and response headers
    def get_deleted_secrets_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedSecretsApi.get_deleted_secrets ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedSecretsApi.get_deleted_secrets"
      end
      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] > 25
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling DeletedSecretsApi.get_deleted_secrets, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] < 1
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling DeletedSecretsApi.get_deleted_secrets, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/deletedsecrets'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version
      query_params[:'maxresults'] = opts[:'maxresults'] if !opts[:'maxresults'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedSecretListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedSecretsApi#get_deleted_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Permanently deletes the specified secret.
    # The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
    # @param secret_name The name of the secret.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def purge_deleted_secret(secret_name, api_version, opts = {})
      purge_deleted_secret_with_http_info(secret_name, api_version, opts)
      nil
    end

    # Permanently deletes the specified secret.
    # The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
    # @param secret_name The name of the secret.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def purge_deleted_secret_with_http_info(secret_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedSecretsApi.purge_deleted_secret ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DeletedSecretsApi.purge_deleted_secret"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedSecretsApi.purge_deleted_secret"
      end
      # resource path
      local_var_path = '/deletedsecrets/{secret-name}'.sub('{' + 'secret-name' + '}', secret_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedSecretsApi#purge_deleted_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recovers the deleted secret to the latest version.
    # Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
    # @param secret_name The name of the deleted secret.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [SecretBundle]
    def recover_deleted_secret(secret_name, api_version, opts = {})
      data, _status_code, _headers = recover_deleted_secret_with_http_info(secret_name, api_version, opts)
      data
    end

    # Recovers the deleted secret to the latest version.
    # Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
    # @param secret_name The name of the deleted secret.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecretBundle, Fixnum, Hash)>] SecretBundle data, response status code and response headers
    def recover_deleted_secret_with_http_info(secret_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedSecretsApi.recover_deleted_secret ...'
      end
      # verify the required parameter 'secret_name' is set
      if @api_client.config.client_side_validation && secret_name.nil?
        fail ArgumentError, "Missing the required parameter 'secret_name' when calling DeletedSecretsApi.recover_deleted_secret"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedSecretsApi.recover_deleted_secret"
      end
      # resource path
      local_var_path = '/deletedsecrets/{secret-name}/recover'.sub('{' + 'secret-name' + '}', secret_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecretBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedSecretsApi#recover_deleted_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
