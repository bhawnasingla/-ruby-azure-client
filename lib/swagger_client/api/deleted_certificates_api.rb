=begin
#KeyVaultClient

#The key vault client performs cryptographic key operations and vault operations against the Key Vault service.

OpenAPI spec version: 7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module SwaggerClient
  class DeletedCertificatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves information about the specified deleted certificate.
    # The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [DeletedCertificateBundle]
    def get_deleted_certificate(certificate_name, api_version, opts = {})
      data, _status_code, _headers = get_deleted_certificate_with_http_info(certificate_name, api_version, opts)
      data
    end

    # Retrieves information about the specified deleted certificate.
    # The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
    # @param certificate_name The name of the certificate
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedCertificateBundle, Fixnum, Hash)>] DeletedCertificateBundle data, response status code and response headers
    def get_deleted_certificate_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedCertificatesApi.get_deleted_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling DeletedCertificatesApi.get_deleted_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedCertificatesApi.get_deleted_certificate"
      end
      # resource path
      local_var_path = '/deletedcertificates/{certificate-name}'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedCertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedCertificatesApi#get_deleted_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists the deleted certificates in the specified vault currently available for recovery.
    # The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @option opts [BOOLEAN] :include_pending Specifies whether to include certificates which are not completely provisioned.
    # @return [DeletedCertificateListResult]
    def get_deleted_certificates(api_version, opts = {})
      data, _status_code, _headers = get_deleted_certificates_with_http_info(api_version, opts)
      data
    end

    # Lists the deleted certificates in the specified vault currently available for recovery.
    # The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
    # @option opts [BOOLEAN] :include_pending Specifies whether to include certificates which are not completely provisioned.
    # @return [Array<(DeletedCertificateListResult, Fixnum, Hash)>] DeletedCertificateListResult data, response status code and response headers
    def get_deleted_certificates_with_http_info(api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedCertificatesApi.get_deleted_certificates ...'
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedCertificatesApi.get_deleted_certificates"
      end
      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] > 25
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling DeletedCertificatesApi.get_deleted_certificates, must be smaller than or equal to 25.'
      end

      if @api_client.config.client_side_validation && !opts[:'maxresults'].nil? && opts[:'maxresults'] < 1
        fail ArgumentError, 'invalid value for "opts[:"maxresults"]" when calling DeletedCertificatesApi.get_deleted_certificates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/deletedcertificates'

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version
      query_params[:'maxresults'] = opts[:'maxresults'] if !opts[:'maxresults'].nil?
      query_params[:'includePending'] = opts[:'include_pending'] if !opts[:'include_pending'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletedCertificateListResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedCertificatesApi#get_deleted_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Permanently deletes the specified deleted certificate.
    # The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
    # @param certificate_name The name of the certificate
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def purge_deleted_certificate(certificate_name, api_version, opts = {})
      purge_deleted_certificate_with_http_info(certificate_name, api_version, opts)
      nil
    end

    # Permanently deletes the specified deleted certificate.
    # The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
    # @param certificate_name The name of the certificate
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def purge_deleted_certificate_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedCertificatesApi.purge_deleted_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling DeletedCertificatesApi.purge_deleted_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedCertificatesApi.purge_deleted_certificate"
      end
      # resource path
      local_var_path = '/deletedcertificates/{certificate-name}'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedCertificatesApi#purge_deleted_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recovers the deleted certificate back to its current version under /certificates.
    # The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
    # @param certificate_name The name of the deleted certificate
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [CertificateBundle]
    def recover_deleted_certificate(certificate_name, api_version, opts = {})
      data, _status_code, _headers = recover_deleted_certificate_with_http_info(certificate_name, api_version, opts)
      data
    end

    # Recovers the deleted certificate back to its current version under /certificates.
    # The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
    # @param certificate_name The name of the deleted certificate
    # @param api_version Client API version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateBundle, Fixnum, Hash)>] CertificateBundle data, response status code and response headers
    def recover_deleted_certificate_with_http_info(certificate_name, api_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeletedCertificatesApi.recover_deleted_certificate ...'
      end
      # verify the required parameter 'certificate_name' is set
      if @api_client.config.client_side_validation && certificate_name.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_name' when calling DeletedCertificatesApi.recover_deleted_certificate"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DeletedCertificatesApi.recover_deleted_certificate"
      end
      # resource path
      local_var_path = '/deletedcertificates/{certificate-name}/recover'.sub('{' + 'certificate-name' + '}', certificate_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CertificateBundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeletedCertificatesApi#recover_deleted_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
